{"version":3,"sources":["styles/List.module.css","styles/Home.module.css","styles/Heard.module.css","components/Heard.js","components/Home.js","components/List.js","components/App.js","utilities/storage.js","serviceWorker.js","index.js"],"names":["module","exports","Heard","listening","result","toggleListening","className","styles","main","transcript","confidence","toFixed","button","onClick","Home","lists","addList","openList","useState","addingList","setAddingList","addBox","name","add","Object","keys","map","key","listName","List","list","closeList","addWord","removeWord","wordBox","title","doneButton","word","remove","App","recognizer","setRecognizer","setListening","setResult","setListName","initialValue","stored","window","localStorage","getItem","JSON","parse","err","console","error","setItem","stringify","value","setValue","useEffect","useLocalStorage","setLists","showList","Boolean","showHome","abort","r","webkitSpeechRecognition","continuous","onresult","e","results","length","start","trim","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6083ddb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wordBox\":\"List_wordBox__206_B\",\"result\":\"List_result__6_RAR\",\"remove\":\"List_remove__2DPGM\",\"add\":\"List_add__2hXL9\",\"title\":\"List_title__1c5e1\",\"list\":\"List_list__1As5q\",\"word\":\"List_word__P8IiM\",\"doneButton\":\"List_doneButton__2hot6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addBox\":\"Home_addBox__3vMoM\",\"name\":\"Home_name__37j4G\",\"remove\":\"Home_remove__3hBO9\",\"add\":\"Home_add__3udk8\",\"listName\":\"Home_listName__9Ce35\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Heard_main__3cjLR\",\"button\":\"Heard_button__2YzMd\",\"confidence\":\"Heard_confidence__3p4_B\"};","import React, { Fragment } from 'react';\nimport styles from '../styles/Heard.module.css';\n\nfunction Heard({ listening, result, toggleListening }) {\n  return (\n    <main className={styles.main}>\n      <span>\n        {result && \n          <Fragment>\n            <span>{result.transcript}</span>\n            <span className={styles.confidence}>{(100 * result.confidence).toFixed(1)}%</span>\n          </Fragment>\n        }\n      </span>\n      <span>\n        <button className={styles.button} onClick={toggleListening}>\n          { listening ? 'Stop' : 'Start' }\n        </button>\n      </span>\n    </main>\n  )\n}\n\nexport default Heard;\n","import React, { Fragment, useState } from 'react';\nimport styles from '../styles/Home.module.css';\n\nfunction Home({ listening, result, lists, addList, openList }) {\n  const [addingList, setAddingList] = useState(false);\n\n  function add(name) {\n    if (addingList && result) {\n      addList(result.transcript);\n      setAddingList(false);\n    } else {\n      setAddingList(true);\n    }\n  }\n\n  return (\n    <Fragment>\n      <div className={styles.addBox}>\n        { addingList &&\n          <div className={styles.name}>{result.transcript}</div>\n        }\n        <button onClick={add} className={styles.add}>+</button>\n      </div>\n      <div>\n        <div>Lists</div>\n        <ul>\n          { Object.keys(lists).map((name) => (\n            <li key={name}>\n              <button onClick={() => openList(name)} className={styles.listName}>{name}</button>\n            </li>\n          ))}\n    </ul>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport styles from '../styles/List.module.css';\n\nfunction List({ listening, result, listName, list, closeList, addWord, removeWord }) {\n  return (\n    <main className={styles.main}>\n      <div className={styles.wordBox}>\n        <div className={styles.result}>\n          {result && result.transcript}\n        </div>\n        <span>\n          <button className={styles.add} onClick={() => addWord(result.transcript, listName)}>+</button>\n        </span>\n      </div>\n      <div>\n        <div className={styles.title}>\n          {listName}\n          <button className={styles.doneButton} onClick={closeList}>Done</button>\n        </div>\n        <div className={styles.list}>\n          { list && Object.keys(list).map((word) => (\n            <div key={word} className={styles.word}>\n              {word}\n              <button className={styles.remove} onClick={() => removeWord(word, listName)}>x</button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default List;\n","import React, { Fragment, useState } from 'react';\nimport { useLocalStorage } from '../utilities/storage';\nimport Heard from './Heard';\nimport Home from './Home';\nimport List from './List';\n\nfunction App() {\n  const [recognizer, setRecognizer] = useState(null);\n  const [listening, setListening] = useState(false);\n  const [result, setResult] = useState({ transcript: 'hello', confidence: .9544 });\n  const [listName, setListName] = useState(null);\n  const [lists, setLists] = useLocalStorage('wordLists', {});\n\n  function toggleListening() {\n    if (listening) {\n      recognizer.abort();\n      setRecognizer(null);\n      setResult(null);\n      setListening(false);\n    } else {\n      const r = new window.webkitSpeechRecognition();\n      r.continuous = true;\n      r.onresult = (e) => {\n        const result = e.results[e.results.length - 1][0];\n        setResult(result);\n      };\n      r.start();\n      setRecognizer(r);\n      setListening(true);\n    }\n  }\n\n  function addList(name) {\n    if (!lists[name]) {\n      setLists((lists) => ({\n        ...lists,\n        [name]: {},\n      }));\n    }\n  }\n\n  function openList(name) {\n    setListName(name);\n  }\n\n  function closeList() {\n    setListName(null);\n  }\n\n  function addWord(word, name) {\n    const list = lists[name];\n    list[word.trim()] = {};\n    setLists({\n      ...lists,\n      [name]: {\n        ...list,\n      }\n    });\n  }\n\n  function removeWord(word, name) {\n    const list = lists[name];\n    delete list[word];\n    setLists({\n      ...lists,\n      [name]: {\n        ...list,\n      }\n    });\n  }\n\n  //const showGame;\n  const showList = Boolean(listName);\n  const showHome = !showList;\n\n  return (\n    <Fragment>\n      <header>\n        <Heard\n          listening={listening}\n          result={result}\n          toggleListening={toggleListening}\n        />\n      </header>\n      <main className='page'>\n        <div className='accent appName'><div>Say</div><div>Word</div></div>\n        { showHome &&\n            <Home\n              listening={listening}\n              result={result}\n              lists={lists}\n              addList={addList}\n              openList={openList}\n            />\n        }\n        { showList && \n            <List\n              listening={listening}\n              result={result}\n              listName={listName}\n              list={lists[listName]}\n              closeList={closeList}\n              addWord={addWord}\n              removeWord={removeWord}\n            />\n        }\n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  const [value, setValue] = useState(() => {\n    const stored = window.localStorage.getItem(key);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (err) {\n        console.error('localStorage error:', key, stored, err);\n      }\n    }\n    window.localStorage.setItem(key, JSON.stringify(initialValue));\n    return initialValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/normalize.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}